{"version":3,"sources":["resolve/gist.js"],"names":["getFilenames","getGistId","isRawGistUrl","githubHeaders","getGist","getGistFile","compileModule","getPrimaryFile","hash","startsWith","segments","slice","split","reduce","filesnames","segment","index","nextIndex","basename","join","ext","extension","length","concat","gistWithOwnerAndId","url","match","id","gistId","filenames","rawGistUrl","test","baseHeaders","accessToken","options","resolve","reject","headers","json","error","res","data","body","code","globals","exports","module","globalNames","keys","values","require","map","key","Function","apply","gist","files","filename","file","raw_url","isMatch","getInfo","resolveOptions","fileUrl","description","Error","name","script","cache","transforms","saveGist","scriptPath","cleanup","getMod","getOptions","getExecutor","runner","execute","root","run"],"mappings":"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","file":"gist.js","sourcesContent":["import path from 'path'\nimport request from 'request'\n\nexport function getFilenames (hash) {\n  if (!(hash && hash.startsWith('file-'))) {\n    return []\n  }\n  const segments = hash.slice(5).split('-')\n  return segments.reduce((filesnames, segment, index, segments) => {\n    const nextIndex = index + 1\n    const basename = segments.slice(0, nextIndex).join('-')\n    const ext = segments.slice(nextIndex)\n    const extension = ext.length ? '.' + ext.join('.') : ''\n    return filesnames.concat(`${basename}${extension}`)\n  }, [])\n}\n\nconst gistWithOwnerAndId = /https:\\/\\/gist\\.github\\.com\\/(?:.*)\\/(.*)/\nexport function getGistId (url) {\n  const match = url.match(gistWithOwnerAndId)\n  if (match) {\n    const [, id] = match\n    const [gistId, hash] = id.split('#')\n    const filenames = getFilenames(hash)\n    return [gistId, filenames]\n  }\n}\n\nconst rawGistUrl = /https:\\/\\/gist\\.githubusercontent\\.com\\/(.*)\\/(.*)\\/raw\\/(.*)\\/(.*)/\nexport function isRawGistUrl (url) {\n  return rawGistUrl.test(url)\n}\n\nconst baseHeaders = {\n  'User-Agent': 'Landscaper'\n}\n\nexport function githubHeaders (accessToken) {\n  if (!accessToken) {\n    return baseHeaders\n  }\n  return {\n    ...baseHeaders,\n    'Authorization': `token ${accessToken}`\n  }\n}\n\nexport function getGist (id, options) {\n  const url = `https://api.github.com/gists/${id}`\n  return new Promise((resolve, reject) => {\n    request({\n      url,\n      headers: githubHeaders(options.accessToken),\n      json: true\n    }, (error, res, data) => {\n      error ? reject(error) : resolve(data)\n    })\n  })\n}\n\nexport function getGistFile (url, options) {\n  return new Promise((resolve, reject) => {\n    request({\n      url,\n      headers: githubHeaders(options.accessToken)\n    }, (error, res, body) => {\n      error ? reject(error) : resolve(body)\n    })\n  })\n}\n\nexport function compileModule (code, globals = {}) {\n  let exports = {}\n  let module = { exports }\n  let globalNames = Object.keys(globals)\n  let keys = ['module', 'exports', 'require', ...globalNames]\n  let values = [module, exports, require, ...globalNames.map(key => globals[key])]\n  /* eslint-disable no-new-func */\n  new Function(keys.join(), code).apply(exports, values)\n  return module.exports\n}\n\nexport function getPrimaryFile (gist, filenames) {\n  const {files} = gist\n  if (!files) {\n    return\n  }\n  for (const filename of filenames) {\n    const file = files[filename]\n    if (file) {\n      return file.raw_url\n    }\n  }\n  const index = files['index.js']\n  if (index) {\n    return index.raw_url\n  }\n  for (const filename in files) {\n    return files[filename].raw_url\n  }\n}\n\nexport default {\n  isMatch (url) {\n    return !!(getGistId(url) || isRawGistUrl(url))\n  },\n\n  async getInfo (url, resolveOptions) {\n    let fileUrl\n    let description\n    if (isRawGistUrl(url)) {\n      fileUrl = url\n      description = 'Raw github gist'\n    } else {\n      const [id, filenames] = getGistId(url)\n      const gist = await getGist(id, resolveOptions)\n      fileUrl = getPrimaryFile(gist, filenames)\n      description = gist.description\n    }\n    if (!fileUrl) {\n      throw new Error('Gist did not have any files')\n    }\n    const [name] = path.basename(fileUrl).split('#')\n    const script = await getGistFile(fileUrl, resolveOptions)\n    const {cache, transforms} = resolveOptions\n    const {scriptPath, cleanup} = await cache.saveGist(fileUrl, script)\n    const options = transforms.getMod(scriptPath).getOptions()\n    await cleanup()\n    return {name, description, options}\n  },\n\n  async getExecutor (url, resolveOptions) {\n    let fileUrl = url\n    if (!isRawGistUrl(url)) {\n      const [id, filenames] = getGistId(url)\n      const gist = await getGist(id, resolveOptions)\n      fileUrl = getPrimaryFile(gist, filenames)\n    }\n    if (!fileUrl) {\n      throw new Error('Gist did not have any files')\n    }\n    const script = await getGistFile(fileUrl, resolveOptions)\n    const {cache, transforms} = resolveOptions\n    const {scriptPath, cleanup} = await cache.saveGist(fileUrl, script)\n    const runner = transforms.getMod(scriptPath)\n    await cleanup()\n    return function execute (root, options) {\n      return runner.run(root, options)\n    }\n  }\n}\n"]}