{"version":3,"sources":["resolve/npm.js"],"names":["isValidPackage","getNameAndPath","name","validForNewPackages","modName","includes","split","scope","parts","charAt","unshift","path","join","isMatch","getInfo","cache","transforms","packageName","packagePath","description","getPackage","packageDir","requirePath","options","getMod","getOptions","getExecutor","runner","root","run"],"mappings":";;;;;;;;;;;;;;;;;;;;;;QAIgBA,c,GAAAA,c;QAIAC,c,GAAAA,c;;AARhB;;;;AACA;;;;AACA;;;;AAEO,SAASD,cAAT,CAAyBE,IAAzB,EAA+B;AACpC,SAAO,sCAAuBA,IAAvB,EAA6BC,mBAApC;AACD;;AAEM,SAASF,cAAT,CAAyBG,OAAzB,EAAkC;AACvC,MAAIA,QAAQC,QAAR,CAAiB,KAAjB,CAAJ,EAA6B;AAC3B;AACD;;AAHsC,uBAKTD,QAAQE,KAAR,CAAc,GAAd,CALS;AAAA;AAAA,MAKlCC,KALkC;AAAA,MAK3BL,IAL2B;AAAA,MAKlBM,KALkB;;AAMvC,MAAID,MAAME,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3BP,WAAOK,QAAQ,GAAR,GAAcL,IAArB;AACD,GAFD,MAEO;AACLM,UAAME,OAAN,CAAcR,IAAd;AACAA,WAAOK,KAAP;AACD;AACD,MAAI,CAACP,eAAeE,IAAf,CAAL,EAA2B;AACzB;AACD;AACD,MAAMS,OAAOH,MAAMI,IAAN,CAAW,GAAX,CAAb;AACA,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,CAACT,IAAD,CAAP;AACD;AACD,SAAO,CAACA,IAAD,EAAOS,IAAP,CAAP;AACD;;kBAEc;AACbE,SADa,mBACJT,OADI,EACK;AAChB,WAAO,CAAC,CAACH,eAAeG,OAAf,CAAT;AACD,GAHY;AAKPU,SALO,mBAKEV,OALF,QAKgC;AAAA;;AAAA,QAApBW,KAAoB,QAApBA,KAAoB;AAAA,QAAbC,UAAa,QAAbA,UAAa;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACRf,eAAeG,OAAf,CADQ,uEACpCa,WADoC,wBACvBC,WADuB;AAAA;AAAA,qBAET,iCAAkBD,WAAlB,CAFS;;AAAA;AAAA;AAEpCf,kBAFoC,SAEpCA,IAFoC;AAE9BiB,yBAF8B,SAE9BA,WAF8B;AAAA;AAAA,qBAGlBJ,MAAMK,UAAN,CAAiBH,WAAjB,CAHkB;;AAAA;AAGrCI,wBAHqC;AAIrCC,yBAJqC,GAIvB,eAAKV,IAAL,CAAUS,UAAV,EAAsBH,eAAe,EAArC,CAJuB;AAKrCK,qBALqC,GAK3BP,WAAWQ,MAAX,CAAkBF,WAAlB,EAA+BG,UAA/B,EAL2B;AAAA,+CAMpC,EAACvB,UAAD,EAAOiB,wBAAP,EAAoBI,gBAApB,EANoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO5C,GAZY;AAcPG,aAdO,uBAcMtB,OAdN,SAcoC;AAAA;;AAAA,QAApBW,KAAoB,SAApBA,KAAoB;AAAA,QAAbC,UAAa,SAAbA,UAAa;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iCACZf,eAAeG,OAAf,CADY,wEACxCa,WADwC,wBAC3BC,WAD2B;AAAA;AAAA,qBAEtBH,MAAMK,UAAN,CAAiBH,WAAjB,CAFsB;;AAAA;AAEzCI,wBAFyC;AAGzCC,yBAHyC,GAG3B,eAAKV,IAAL,CAAUS,UAAV,EAAsBH,eAAe,EAArC,CAH2B;AAIzCS,oBAJyC,GAIhCX,WAAWQ,MAAX,CAAkBF,WAAlB,CAJgC;AAAA,gDAKxC,UAAUM,IAAV,EAAgBL,OAAhB,EAAyB;AAC9B,uBAAOI,OAAOE,GAAP,CAAWD,IAAX,EAAiBL,OAAjB,CAAP;AACD,eAP8C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhD;AAtBY,C","file":"npm.js","sourcesContent":["import path from 'path'\nimport validateNpmPackageName from 'validate-npm-package-name'\nimport {getInfoForPackage} from '../utils/registry'\n\nexport function isValidPackage (name) {\n  return validateNpmPackageName(name).validForNewPackages\n}\n\nexport function getNameAndPath (modName) {\n  if (modName.includes('://')) {\n    return\n  }\n\n  let [scope, name, ...parts] = modName.split('/')\n  if (scope.charAt(0) === '@') {\n    name = scope + '/' + name\n  } else {\n    parts.unshift(name)\n    name = scope\n  }\n  if (!isValidPackage(name)) {\n    return\n  }\n  const path = parts.join('/')\n  if (!path) {\n    return [name]\n  }\n  return [name, path]\n}\n\nexport default {\n  isMatch (modName) {\n    return !!getNameAndPath(modName)\n  },\n\n  async getInfo (modName, {cache, transforms}) {\n    const [packageName, packagePath] = getNameAndPath(modName)\n    const {name, description} = await getInfoForPackage(packageName)\n    const packageDir = await cache.getPackage(packageName)\n    const requirePath = path.join(packageDir, packagePath || '')\n    const options = transforms.getMod(requirePath).getOptions()\n    return {name, description, options}\n  },\n\n  async getExecutor (modName, {cache, transforms}) {\n    const [packageName, packagePath] = getNameAndPath(modName)\n    const packageDir = await cache.getPackage(packageName)\n    const requirePath = path.join(packageDir, packagePath || '')\n    const runner = transforms.getMod(requirePath)\n    return function (root, options) {\n      return runner.run(root, options)\n    }\n  }\n}\n"]}