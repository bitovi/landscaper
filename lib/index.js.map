{"version":3,"sources":["index.js"],"names":["getInfoForMod","run","createTransformLibrary","createPackageCache","modName","options","transforms","auto","cache","then","empty","info","error","directory","mods","reporter","on","catch","emit"],"mappings":";;;;;QAkCgBA,a,GAAAA,a;QA+CAC,G,GAAAA,G;QAsBAC,sB,GAAAA,sB;QAIAC,kB,GAAAA,kB;;AA3GhB;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BO,SAASH,aAAT,CAAwBI,OAAxB,EAA+C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACpD,MAAI,CAACA,QAAQC,UAAb,EAAyB;AACvBD,YAAQC,UAAR,GAAqB,2BAAiBC,IAAjB,EAArB;AACD;AACD,MAAI,CAACF,QAAQG,KAAb,EAAoB;AAClB,QAAMA,QAAQH,QAAQG,KAAR,GAAgB,uBAAaD,IAAb,EAA9B;AACA,WAAO,sBAAQH,OAAR,EAAiBC,OAAjB,EACJI,IADI,CACC,gBAAQ;AACZD,YAAME,KAAN;AACA,aAAOC,IAAP;AACD,KAJI,EAIF,iBAAS;AACVH,YAAME,KAAN;AACA,YAAME,KAAN;AACD,KAPI,CAAP;AAQD;;AAED,SAAO,sBAAQR,OAAR,EAAiBC,OAAjB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BO,SAASJ,GAAT,CAAcY,SAAd,EAAyBC,IAAzB,EAA6C;AAAA,MAAdT,OAAc,uEAAJ,EAAI;;AAClD,MAAMU,WAAW,sBAAjB;AACA,MAAI,CAACV,QAAQG,KAAb,EAAoB;AAClB,QAAMA,QAAQH,QAAQG,KAAR,GAAgB,uBAAaD,IAAb,EAA9B;AACAQ,aAASC,EAAT,CAAY,MAAZ,EAAoB,YAAM;AACxBR,YAAME,KAAN;AACD,KAFD;AAGD;AACD,MAAI,CAACL,QAAQC,UAAb,EAAyB;AACvBD,YAAQC,UAAR,GAAqB,2BAAiBC,IAAjB,EAArB;AACD;AACD,yBAAQ;AACNM,wBADM;AAENE,sBAFM;AAGND,cAHM;AAINT;AAJM,GAAR,EAKGY,KALH,CAKS,iBAAS;AAChBF,aAASG,IAAT,CAAc,OAAd,EAAuBN,KAAvB;AACD,GAPD;AAQA,SAAOG,QAAP;AACD;;AAEM,SAASb,sBAAT,CAAiCI,UAAjC,EAA6C;AAClD,SAAO,+BAAqBA,UAArB,CAAP;AACD;;AAEM,SAASH,kBAAT,CAA6BU,SAA7B,EAAwC;AAC7C,SAAO,2BAAiBA,SAAjB,CAAP;AACD","file":"index.js","sourcesContent":["import execute from './execute'\nimport {getInfo} from './resolve'\nimport EventEmitter from 'events'\nimport PackageCache from './utils/package-cache'\nimport TransformLibrary from './utils/transform-library'\n\n/*\n    getInfoForMod(modName, options: {[cache]})\n\n    @params\n    modName string\n      string which can be a Gist URL or NPM require\n    options object\n      accessToken string\n        access token for using the Github gist API\n      cache PackageCache: npm install directory\n        [optional] default is self-cleanup post-run\n      transforms TransformLibrary\n        [optional] default contains included transforms\n\n    @returns\n    Promise.resolve({\n      name: string,\n      description: string,\n      options: [{\n        name: string (i.e. field name),\n        type: string (i.e. field input type),\n        message: string, (i.e. field label)\n        default: any, (i.e. field placeholder)\n        choices: [any] (used for selects/radios/checkboxes)\n        // see https://github.com/SBoudrias/Inquirer.js/#question\n      }]\n    })\n*/\nexport function getInfoForMod (modName, options = {}) {\n  if (!options.transforms) {\n    options.transforms = TransformLibrary.auto()\n  }\n  if (!options.cache) {\n    const cache = options.cache = PackageCache.auto()\n    return getInfo(modName, options)\n      .then(info => {\n        cache.empty()\n        return info\n      }, error => {\n        cache.empty()\n        throw error\n      })\n  }\n\n  return getInfo(modName, options)\n}\n\n/*\n  run(directory, mods[, cache])\n\n  @params\n  directory string\n    directory containing the project\n  mods Array<Object{id: string, options: object}>\n    transforms (id is a url or require path)\n    options is a map of <inquirer.name, supplied value>\n  options object\n    accessToken string\n      access token for using the Github gist API\n    cache PackageCache: npm install directory\n      [optional] default is self-cleanup post-run\n    transforms TransformLibrary\n      [optional] default contains included transforms\n\n  @returns\n  reporter EventEmitter\n    events:\n      mod/\n        resolving: mod begins loading\n        not-found: mod not found error, skips to next\n        resolved: mod found, nothing on to next\n        applying: mod is being applied\n        apply-failed: mod rejected with an error\n        applied: mod has been applied, moving on to next\n*/\nexport function run (directory, mods, options = {}) {\n  const reporter = new EventEmitter()\n  if (!options.cache) {\n    const cache = options.cache = PackageCache.auto()\n    reporter.on('done', () => {\n      cache.empty()\n    })\n  }\n  if (!options.transforms) {\n    options.transforms = TransformLibrary.auto()\n  }\n  execute({\n    directory,\n    reporter,\n    mods,\n    options\n  }).catch(error => {\n    reporter.emit('error', error)\n  })\n  return reporter\n}\n\nexport function createTransformLibrary (transforms) {\n  return new TransformLibrary(transforms)\n}\n\nexport function createPackageCache (directory) {\n  return new PackageCache(directory)\n}\n"]}