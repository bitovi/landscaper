{"version":3,"sources":["execute.js"],"names":["mods","options","emit","modMap","mod","name","_id","error","loadMods","directory","executor","applyMods","reporter","type","data","execute"],"mappings":";;;;;;;;;;;;;;;;;;;;wEAEO,iBAAyBA,IAAzB,EAA+BC,OAA/B,EAAwCC,IAAxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,kBADD,GACU,EADV;AAAA;AAAA;AAAA;AAAA;AAAA,mDAEaH,IAFb;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEMI,eAFN;;AAGHF,iBAAK,eAAL,EAAsB,EAACE,QAAD,EAAtB;AAHG;AAAA;AAAA,mBAKuB,0BAAYA,IAAIC,IAAhB,EAAsBJ,OAAtB,CALvB;;AAAA;AAKDE,mBAAOC,IAAIE,GAAX,CALC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAODJ,iBAAK,eAAL,EAAsB,EAACE,QAAD,EAAMG,kBAAN,EAAtB;AAPC;;AAAA;AAUHL,iBAAK,cAAL,EAAqB,EAACE,QAAD,EAArB;;AAVG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,6CAYED,MAZF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,Q;;;;;;yEAef,kBAA0BC,SAA1B,EAAqCT,IAArC,EAA2CG,MAA3C,EAAmDD,IAAnD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACaF,IADb;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACMI,eADN;AAEGM,oBAFH,GAEcP,OAAOC,IAAIE,GAAX,CAFd;;AAGHJ,iBAAK,cAAL,EAAqB,EAACE,QAAD,EAArB;AAHG;AAAA;AAAA,mBAKKM,SAASD,SAAT,EAAoBL,IAAIH,OAAxB,CALL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAODC,iBAAK,kBAAL,EAAyB,EAACE,QAAD,EAAMG,mBAAN,EAAzB;AAPC;;AAAA;AAUHL,iBAAK,aAAL,EAAoB,EAACE,QAAD,EAApB;;AAVG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,S;;;;;AAjBtB;;;;;yEA+Be;AAAA,QAAyBF,SAAzB,SAAyBA,SAAzB;AAAA,QAAoCG,QAApC,SAAoCA,QAApC;AAAA,QAA8CZ,IAA9C,SAA8CA,IAA9C;AAAA,QAAoDC,OAApD,SAAoDA,OAApD;AAAA,QACJC,IADI;AAAA;AAAA;AAAA;AAAA;AACJA,gBADI,YACJA,IADI,CACEW,IADF,EACQC,IADR,EACc;AACzBA,mBAAKD,IAAL,GAAYA,IAAZ;AACAD,uBAASV,IAAT,CAAcW,IAAd,EAAoBC,IAApB;AACAF,uBAASV,IAAT,CAAc,KAAd,EAAqB,EAACW,UAAD,EAAOC,UAAP,EAArB;AACD,aALY;;AAAA;AAAA,mBAOQN,SAASR,IAAT,EAAeC,OAAf,EAAwBC,IAAxB,CAPR;;AAAA;AAOPC,kBAPO;AAAA;AAAA,mBAQPQ,UAAUF,SAAV,EAAqBT,IAArB,EAA2BG,MAA3B,EAAmCD,IAAnC,CARO;;AAAA;AASbA,iBAAK,MAAL,EAAa,EAACO,oBAAD,EAAYT,UAAZ,EAAb;;AATa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAee,O;;;;SAAAA,O","file":"execute.js","sourcesContent":["import {getExecutor} from './resolve'\n\nexport async function loadMods (mods, options, emit) {\n  const modMap = {}\n  for (const mod of mods) {\n    emit('mod/resolving', {mod})\n    try {\n      modMap[mod._id] = await getExecutor(mod.name, options)\n    } catch (error) {\n      emit('mod/not-found', {mod, error})\n      throw error\n    }\n    emit('mod/resolved', {mod})\n  }\n  return modMap\n}\n\nexport async function applyMods (directory, mods, modMap, emit) {\n  for (const mod of mods) {\n    const executor = modMap[mod._id]\n    emit('mod/applying', {mod})\n    try {\n      await executor(directory, mod.options)\n    } catch (error) {\n      emit('mod/apply-failed', {mod, error})\n      throw error\n    }\n    emit('mod/applied', {mod})\n  }\n}\n\nexport default async function execute ({directory, reporter, mods, options}) {\n  function emit (type, data) {\n    data.type = type\n    reporter.emit(type, data)\n    reporter.emit('log', {type, data})\n  }\n\n  const modMap = await loadMods(mods, options, emit)\n  await applyMods(directory, mods, modMap, emit)\n  emit('done', {directory, mods})\n}\n"]}