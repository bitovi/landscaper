{"version":3,"sources":["cli.js"],"names":["directory","process","cwd","prompt","name","type","message","agree","console","log","collectMods","mods","accessToken","apply","reporter","cache","on","data","msg","mod","slice","error","resolve","reject","landscape","modName","token","getToken","trim","addMod","info","isMatch","description","options","args","argv","arg","PackageCache","require","default","auto","version","help","map","x","join","then","concat","another","commands","command"],"mappings":"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","file":"cli.js","sourcesContent":["\nimport inquirer from 'inquirer'\nimport {getInfoForMod, run} from './index'\nimport gist from './resolve/gist'\nimport pkg from '../package.json'\n\nconst args = process.argv.slice(2)\nconst arg = args[0]\n\nconst PackageCache = require('../lib/utils/package-cache').default\nconst cache = PackageCache.auto()\n\nfunction version () {\n  console.log('\\n' + pkg.name + '@' + pkg.version + '\\n')\n}\n\nfunction help () {\n  console.log([\n    '',\n    'USAGE:',\n    pkg.name + ' [directory]',\n    '  runs landscaper on the directory (current directory by default)',\n    '',\n    'FLAGS:',\n    '-v, -V, --version: version information',\n    '-h, -H, --help: command documentation',\n    ''\n  ].map(x => '  ' + x).join('\\n'))\n}\n\nasync function landscape ([directory]) {\n  directory = directory || process.cwd()\n  const {agree} = await inquirer.prompt([{\n    name: 'agree',\n    type: 'confirm',\n    message: 'Landscape \"' + directory + '\"?'\n  }])\n  if (!agree) {\n    return console.log('Okay, take your time')\n  }\n\n  const {mods, accessToken} = await collectMods()\n  const {apply} = await inquirer.prompt([{\n    name: 'apply',\n    type: 'confirm',\n    message: 'Apply mods?'\n  }])\n  if (!apply) {\n    return console.log('Wow, what a let down...')\n  }\n\n  const reporter = run(directory, mods, {accessToken, cache})\n  reporter.on('log', ({type, data}) => {\n    if (type === 'error' || type === 'done') {\n      return\n    }\n    let msg = '  '\n    if (data.mod) {\n      msg += '[' + data.mod.name + '] '\n    }\n    msg += type.slice(4)\n    if (data.error) {\n      msg += ' ' + data.error\n    }\n\n    console.log(msg)\n  })\n\n  await new Promise((resolve, reject) => {\n    reporter.on('error', reject)\n    reporter.on('done', resolve)\n  })\n\n  console.log('Landscaping complete!')\n}\n\nfunction collectMods (mods = [], accessToken) {\n  return addMod(accessToken).then(function ({mod, accessToken}) {\n    mods = mods.concat(mod)\n    return inquirer.prompt([{\n      name: 'another',\n      type: 'confirm',\n      message: 'Would you like to add another mod?'\n    }]).then(({another}) => {\n      if (!another) {\n        return {mods, accessToken}\n      }\n      return collectMods(mods, accessToken)\n    })\n  })\n}\n\nasync function getToken (modName, accessToken) {\n  const {token} = await inquirer.prompt([{\n    name: 'token',\n    type: 'input',\n    message: 'Please provide a personal access token to access gists:'\n  }])\n\n  return token\n}\n\nasync function addMod (accessToken) {\n  let {modName} = await inquirer.prompt([{\n    name: 'modName',\n    type: 'input',\n    message: 'Please enter a NPM or Gist mod:'\n  }])\n  modName = modName.trim()\n  if (!modName) {\n    return addMod(accessToken)\n  }\n\n  console.log('Fetching options for \"' + modName + '\"')\n  let info\n  try {\n    info = await getInfoForMod(modName, {accessToken, cache})\n  } catch (error) {\n    if (!accessToken && gist.isMatch(modName)) {\n      console.log('Error accessing gist:', error)\n      accessToken = await getToken(modName, accessToken)\n    } else {\n      console.log('Error:', error)\n    }\n    return addMod(accessToken)\n  }\n  console.log('Mod name: ' + info.name)\n  console.log('Mod description: ' + info.description)\n  const options = await inquirer.prompt(info.options)\n  return {mod: {name: modName, options}, accessToken}\n}\n\nconst commands = {\n  '--version': version,\n  '-V': version,\n  '-v': version,\n\n  '--help': help,\n  '-H': help,\n  '-h': help,\n\n  default: landscape\n}\n\nconst command = commands[arg]\nif (command) {\n  command(args.slice(1))\n} else {\n  commands.default(args)\n}\n"]}