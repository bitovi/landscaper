{"version":3,"sources":["utils/package-cache.js"],"names":["isExistingDirectory","path","resolve","reject","stat","error","stats","isDirectory","silence","promise","stdout","console","_stdout","write","then","setTimeout","x","npmInstall","directory","packageName","name","npmLoad","loglevel","progress","result","PackageCache","_directory","gistCounter","packagePath","join","isInstalled","rawGistUrl","scriptText","filename","basename","split","filepath","writeFile","cleanup","unlink","scriptPath","cachePath","dirname","__dirname","cache","empty","sync","mkdirSync"],"mappings":"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","file":"package-cache.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport npmi from 'npmi'\nimport rimraf from 'rimraf'\n\nfunction isExistingDirectory (path) {\n  return new Promise((resolve, reject) => {\n    fs.stat(path, (error, stats) => {\n      resolve(!error && stats.isDirectory())\n    })\n  })\n}\n\n// we need this to fix problems with npmlog and inquirer\nfunction silence (promise) {\n  const stdout = console._stdout\n  console._stdout = { write () {} }\n  return promise().then(x => {\n    return new Promise((resolve) => {\n      setTimeout(() => resolve(x), 100)\n    })\n  }).then(x => {\n    console._stdout = stdout\n    return x\n  }, error => {\n    console._stdout = stdout\n    throw error\n  })\n}\n\nfunction npmInstall (directory, packageName) {\n  return silence(() => {\n    return new Promise((resolve, reject) => {\n      npmi({\n        name: packageName,\n        path: directory,\n        npmLoad: {\n          loglevel: 'silent',\n          progress: false\n        }\n      }, (error, result) => {\n        error ? reject(error) : resolve(result)\n      })\n    })\n  })\n}\n\nexport default class PackageCache {\n  constructor (directory) {\n    this._directory = directory\n    this.gistCounter = 0\n  }\n\n  async getPackage (packageName) {\n    const packagePath = path.join(this._directory, 'node_modules', packageName)\n    const isInstalled = await isExistingDirectory(packagePath)\n    if (!isInstalled) {\n      await npmInstall(this._directory, packageName)\n    }\n    return packagePath\n  }\n\n  async saveGist (rawGistUrl, scriptText) {\n    const filename = path.basename(rawGistUrl).split('#')[0]\n    const filepath = path.join(this._directory, filename + '-' + this.gistCounter++)\n\n    await new Promise((resolve, reject) => {\n      fs.writeFile(filepath, scriptText, error => (\n        error ? reject(error) : resolve()\n      ))\n    })\n\n    const cleanup = () => {\n      return new Promise((resolve, reject) => {\n        fs.unlink(filepath, error => {\n          error ? reject(error) : resolve()\n        })\n      })\n    }\n    return {scriptPath: filepath, cleanup}\n  }\n\n  static auto () {\n    const cachePath = path.join(path.dirname(__dirname), 'cache')\n    const cache = new PackageCache(cachePath)\n    cache.empty = () => {\n      rimraf.sync(cachePath)\n    }\n    cache.empty()\n    fs.mkdirSync(cachePath)\n    return cache\n  }\n}\n"]}