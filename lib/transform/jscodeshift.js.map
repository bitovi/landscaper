{"version":3,"sources":["transform/jscodeshift.js"],"names":["mod","modFilePath","fixedPath","text","readFileSync","encoding","writeFileSync","getOptions","modOptions","name","type","message","concat","run","directory","options","paths","path","split","codeOptions","sync","cwd","map","join","file","transform","babel","extensions","runInBand","silent","parser","landscaper","then","unlinkSync"],"mappings":";;;;;;kBAKe,UAAUA,GAAV,EAAeC,WAAf,EAA4B;AACzC;AACA,MAAMC,YAAYD,cAAc,WAAhC;AACA,MAAME,OAAO,aAAGC,YAAH,CAAgBH,WAAhB,EAA6B,EAACI,UAAU,MAAX,EAA7B,CAAb;AACA,eAAGC,aAAH,CAAiBJ,SAAjB,EAA4BC,IAA5B;;AAEA,SAAO;AACLI,cADK,wBACS;AACZ,UAAIC,aAAa,EAAjB;AACA,UAAI,OAAOR,IAAIO,UAAX,KAA0B,UAA9B,EAA0C;AACxCC,qBAAaR,IAAIO,UAAJ,EAAb;AACD;AACD,aAAO,CAAC;AACNE,cAAM,MADA;AAENC,cAAM,OAFA;AAGNC,iBAAS;AAHH,OAAD,EAIJC,MAJI,CAIGJ,UAJH,CAAP;AAKD,KAXI;AAaLK,OAbK,eAaAC,SAbA,EAaWC,OAbX,EAaoB;AACvB,UAAMC,QAAQ,OAAOD,QAAQE,IAAf,KAAwB,QAAxB,GAAmCF,QAAQE,IAAR,CAAaC,KAAb,CAAmB,GAAnB,CAAnC,GAA6DH,QAAQE,IAAnF;AACA,UAAME,cAAc;AAClBF,cAAM,iBAAOG,IAAP,CAAYJ,KAAZ,EAAmB,EAAEK,KAAKP,SAAP,EAAnB,EAAuCQ,GAAvC,CAA2C;AAAA,iBAAQ,eAAKC,IAAL,CAAUT,SAAV,EAAqBU,IAArB,CAAR;AAAA,SAA3C,CADY;AAElBC,mBAAWvB,SAFO;AAGlBwB,eAAO,IAHW;AAIlBC,oBAAY,IAJM;AAKlBC,mBAAW,KALO;AAMlBC,gBAAQ,KANU;AAOlBC,gBAAQ,OAPU;AAQlBC,oBAAYhB;AARM,OAApB;;AAWA,aAAO,iBAAOF,GAAP,CAAWX,SAAX,EAAsBiB,YAAYF,IAAlC,EAAwCE,WAAxC,EACJa,IADI,CACC,YAAM;AACV,qBAAGC,UAAH,CAAc/B,SAAd;AACD,OAHI,CAAP;AAID;AA9BI,GAAP;AAgCD,C;;AA3CD;;;;AACA;;;;AACA;;;;AACA","file":"jscodeshift.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport globby from 'globby'\nimport Runner from 'jscodeshift/dist/Runner'\n\nexport default function (mod, modFilePath) {\n  // duplicate and clean up seperately\n  const fixedPath = modFilePath + '-fixed.js'\n  const text = fs.readFileSync(modFilePath, {encoding: 'utf8'})\n  fs.writeFileSync(fixedPath, text)\n\n  return {\n    getOptions () {\n      let modOptions = []\n      if (typeof mod.getOptions === 'function') {\n        modOptions = mod.getOptions()\n      }\n      return [{\n        name: 'path',\n        type: 'input',\n        message: 'Paths to transform'\n      }].concat(modOptions)\n    },\n\n    run (directory, options) {\n      const paths = typeof options.path === 'string' ? options.path.split(',') : options.path\n      const codeOptions = {\n        path: globby.sync(paths, { cwd: directory }).map(file => path.join(directory, file)),\n        transform: fixedPath,\n        babel: true,\n        extensions: 'js',\n        runInBand: false,\n        silent: false,\n        parser: 'babel',\n        landscaper: options\n      }\n\n      return Runner.run(fixedPath, codeOptions.path, codeOptions)\n        .then(() => {\n          fs.unlinkSync(fixedPath)\n        })\n    }\n  }\n}\n"]}